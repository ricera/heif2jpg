cmake_minimum_required(VERSION 3.21)

project(heif2jpg LANGUAGES CXX)

include(ExternalProject)

# Version number
set(PACKAGE_VERSION 0.0.2)

set(THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party)

# At some point...
if(NOT MSVC)
    # Add FreeBSD compile flags here
endif()

# I don't know how necessary these are
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# For clang
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Speed?
set(CMAKE_BUILD_PARALLEL_LEVEL 8)

# Put install directory in an easy-to-use place
# message(STATUS "old CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install)
message(STATUS "new CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")

set(PROJECT_CONFIG "Release")

# Build libde265, the prereq for decoding HEVC HEIF images using libheif
set(LIBDE265_TARGET_NAME libde265)
set(LIBDE265_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${LIBDE265_TARGET_NAME})
set(LIBDE265_SOURCE_DIR ${THIRD_PARTY_DIR}/${LIBDE265_TARGET_NAME})
set(LIBDE265_BINARY_DIR ${LIBDE265_PREFIX_DIR}/src/${LIBDE265_TARGET_NAME}-build)
set(LIBDE265_INCLUDE_DIRS ${LIBDE265_SOURCE_DIR}/ ${LIBDE265_BINARY_DIR})

set(LIBDE265_LIB_PREFIX ${LIBDE265_BINARY_DIR}/${LIBDE265_TARGET_NAME}/${PROJECT_CONFIG}/)
set(LIBDE265_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}de265${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LIBDE265_LIBRARIES ${LIBDE265_LIB_PREFIX}${LIBDE265_LIB})

message(STATUS "Looking for libde265 .lib at: ${LIBDE265_LIBRARIES}")

ExternalProject_Add(${LIBDE265_TARGET_NAME}
    GIT_REPOSITORY https://github.com/strukturag/libde265.git
    GIT_TAG 67831118e3d6961fab4c29fc4364fa0eccfb8473
    PREFIX ${LIBDE265_PREFIX_DIR}
    SOURCE_DIR ${LIBDE265_SOURCE_DIR}
    BINARY_DIR ${LIBDE265_BINARY_DIR}
    CMAKE_ARGS ""
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
    BUILD_BYPRODUCTS ${LIBDE265_LIBRARIES}
    INSTALL_COMMAND ""
)

# Setup libjpeg-turbo
set(JPEGTURBO_TARGET_NAME turbojpeg)
set(JPEGTURBO_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${JPEGTURBO_TARGET_NAME})
set(JPEGTURBO_SOURCE_DIR ${THIRD_PARTY_DIR}/${JPEGTURBO_TARGET_NAME})
set(JPEGTURBO_BINARY_DIR ${JPEGTURBO_PREFIX_DIR}/src/${JPEGTURBO_TARGET_NAME}-build)
set(JPEG_INCLUDE_DIRS ${JPEGTURBO_SOURCE_DIR}/src ${JPEGTURBO_BINARY_DIR})
# if(MSVC)
    set(JPEG_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}jpeg-static${CMAKE_STATIC_LIBRARY_SUFFIX})
#else()
#    set(JPEG_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}jpeg${CMAKE_STATIC_LIBRARY_SUFFIX})
#endif()

set(JPEG_LIB_PREFIX ${JPEGTURBO_BINARY_DIR}/${PROJECT_CONFIG}/)
set(JPEG_LIBRARIES ${JPEG_LIB_PREFIX}${JPEG_LIB})

message(STATUS "Looking for jpegturbo .lib at: ${JPEG_LIBRARIES}")

ExternalProject_Add(${JPEGTURBO_TARGET_NAME}
    GIT_REPOSITORY https://github.com/libjpeg-turbo/libjpeg-turbo.git
    GIT_TAG 3.1.0
    PREFIX ${JPEGTURBO_PREFIX_DIR}
    SOURCE_DIR ${JPEGTURBO_SOURCE_DIR}
    BINARY_DIR ${JPEGTURBO_BINARY_DIR}
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
    CMAKE_ARGS -DENABLE_SHARED=1
    BUILD_BYPRODUCTS ${JPEG_LIBRARIES}
    INSTALL_COMMAND ""
)

# Setup libheif
set(LIBHEIF_TARGET_NAME libheif)
set(LIBHEIF_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${LIBHEIF_TARGET_NAME})
set(LIBHEIF_SOURCE_DIR ${THIRD_PARTY_DIR}/${LIBHEIF_TARGET_NAME})
set(LIBHEIF_BINARY_DIR ${LIBHEIF_PREFIX_DIR}/src/${LIBHEIF_TARGET_NAME}-build)
set(LIBHEIF_INCLUDE_DIRS ${LIBHEIF_SOURCE_DIR}/libheif/api ${LIBHEIF_BINARY_DIR})

set(HEIF_LIB_PREFIX ${LIBHEIF_BINARY_DIR}/libheif/${PROJECT_CONFIG}/)
set(HEIF_LIB_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}heif${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LIBHEIF_LIBRARIES ${HEIF_LIB_PREFIX}${HEIF_LIB_STATIC})

message(STATUS "Looking for libheif libs: ${LIBHEIF_LIBRARIES}")

ExternalProject_Add(${LIBHEIF_TARGET_NAME}
    DEPENDS ${LIBDE265_TARGET_NAME} ${JPEGTURBO_TARGET_NAME}
    GIT_REPOSITORY https://github.com/strukturag/libheif.git
    GIT_TAG d84f58fe0af319f01ec2fd1739873f10400253b5
    PREFIX ${LIBHEIF_PREFIX_DIR}
    SOURCE_DIR ${LIBHEIF_SOURCE_DIR}
    BINARY_DIR ${LIBHEIF_BINARY_DIR}
    CMAKE_ARGS --preset=release-noplugins -DWITH_EXAMPLES=OFF
    CMAKE_CACHE_ARGS
        "-DLIBDE265_LIBRARY:FILEPATH=${LIBDE265_LIBRARIES}"
        "-DLIBDE265_INCLUDE_DIR:FILEPATH=${LIBDE265_SOURCE_DIR}/libde265"
        "-DWITH_JPEG_ENCODER:BOOL=ON"
        "-DWITH_JPEG_DECODER:BOOL=ON"
        "-DJPEG_LIBRARY:FILEPATH=${JPEG_LIBRARIES}"
        "-DJPEG_INCLUDE_DIR:FILEPATH=${JPEGTURBO_SOURCE_DIR}"
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
    BUILD_BYPRODUCTS ${LIBHEIF_LIBRARIES}
    INSTALL_COMMAND ""
)

# Setup libultrahdr
set(LIBUHDR_TARGET_NAME libultrahdr)
set(LIBUHDR_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${LIBUHDR_TARGET_NAME})
set(LIBUHDR_SOURCE_DIR ${THIRD_PARTY_DIR}/${LIBUHDR_TARGET_NAME})
set(LIBUHDR_BINARY_DIR ${LIBUHDR_PREFIX_DIR}/src/${LIBUHDR_TARGET_NAME}-build)
set(LIBUHDR_INCLUDE_DIRS ${LIBUHDR_SOURCE_DIR}/ ${LIBHEIF_BINARY_DIR})

set(UHDR_LIB_PREFIX ${LIBUHDR_BINARY_DIR}/${PROJECT_CONFIG}/)
set(UHDR_LIB_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}uhdr-static${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LIBUHDR_LIBRARIES ${UHDR_LIB_PREFIX}${UHDR_LIB_STATIC})

message(STATUS "Looking for libultrahdr libs: ${LIBUHDR_LIBRARIES}")

# I give up -- need to find a way to hijack the project's find(JPEG QUIET) call
ExternalProject_Add(${LIBUHDR_TARGET_NAME}
    DEPENDS ${JPEGTURBO_TARGET_NAME}
    GIT_REPOSITORY https://github.com/google/libultrahdr.git
    GIT_TAG 6db3a83ee2b1f79850f3f597172289808dc6a331
    PREFIX ${LIBUHDR_PREFIX_DIR}
    SOURCE_DIR ${LIBUHDR_SOURCE_DIR}
    BINARY_DIR ${LIBUHDR_BINARY_DIR}
    CMAKE_ARGS -DUHDR_WRITE_XMP=1 -DUHDR_BUILD_DEPS=1
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
    BUILD_BYPRODUCTS ${LIBUHDR_LIBRARIES}
    INSTALL_COMMAND ""
)
#
#ExternalProject_Add_Step(${LIBUHDR_TARGET_NAME} copy_libjpegturbo
#    COMMAND ${CMAKE_COMMAND} -B ${JPEGTURBO_BINARY_DIR} --install ./
#    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
#    DEPENDEES download
#    DEPENDERS configure
#)

# Need to figure out what these do
set(PRIVATE_INCLUDE_DIR ${LIBHEIF_SOURCE_DIR} ${LIBHEIF_INCLUDE_DIRS} ${LIBUHDR_SOURCE_DIR} ${LIBUHDR_INCLUDE_DIRS})
set(PRIVATE_LINK_LIBS ${LIBHEIF_LIBRARIES} ${LIBUHDR_LIBRARIES})

set(HEIF2JPG_APP heif2jpg)
add_executable(${HEIF2JPG_APP}
    "app/main.cc"
)
target_include_directories(${HEIF2JPG_APP} PRIVATE ${PRIVATE_INCLUDE_DIR})
target_link_libraries(${HEIF2JPG_APP} PRIVATE ${PRIVATE_LINK_LIBS})

# Install app and necessary .dlls
install(TARGETS ${HEIF2JPG_APP})
install(FILES ${HEIF_LIB_PREFIX}/heif.dll TYPE BIN)
install(FILES ${LIBDE265_LIB_PREFIX}/libde265.dll TYPE BIN)
install(FILES ${UHDR_LIB_PREFIX}/uhdr.dll TYPE BIN)
install(FILES ${JPEG_LIB_PREFIX}/jpeg62.dll TYPE BIN)