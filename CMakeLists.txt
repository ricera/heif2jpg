cmake_minimum_required(VERSION 3.21)

project(heif2jpg LANGUAGES CXX)

include(ExternalProject)

# Version number
set(PACKAGE_VERSION 0.0.2)

set(THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party)

# I don't know how necessary these are
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# For clang
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Speed?
set(CMAKE_BUILD_PARALLEL_LEVEL 8)

# For debugging
# set(CMAKE_VERBOSE_MAKEFILE ON)

# Put install directory in an easy-to-use place
set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install)
message(STATUS "new CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")

set(PROJECT_CONFIG "Release")

# Build libde265, the prereq for decoding HEVC HEIF images using libheif
set(LIBDE265_TARGET_NAME libde265)
set(LIBDE265_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${LIBDE265_TARGET_NAME})
set(LIBDE265_SOURCE_DIR ${THIRD_PARTY_DIR}/${LIBDE265_TARGET_NAME})
set(LIBDE265_BINARY_DIR ${LIBDE265_PREFIX_DIR}/src/${LIBDE265_TARGET_NAME}-build)
set(LIBDE265_INCLUDE_DIRS ${LIBDE265_SOURCE_DIR} ${LIBDE265_BINARY_DIR})

# Use this if building libde265 as a static library
# set(LIBDE265_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}libde265${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LIBDE265_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}de265${CMAKE_STATIC_LIBRARY_SUFFIX})
# Install the library in a local path and refer to it later for libheif
set(LIBDE265_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libde265-install)
set(LIBDE265_LIB_PREFIX ${LIBDE265_INSTALL_DIR}/lib/)
set(LIBDE265_LIBRARIES ${LIBDE265_LIB_PREFIX}${LIBDE265_LIB})

message(STATUS "Looking for libde265 .lib/.a at: ${LIBDE265_LIBRARIES}")

# Build shared libs when using MSVC
if (MSVC)
    ExternalProject_Add(${LIBDE265_TARGET_NAME}
        GIT_REPOSITORY https://github.com/strukturag/libde265.git
        GIT_TAG 67831118e3d6961fab4c29fc4364fa0eccfb8473
        PREFIX ${LIBDE265_PREFIX_DIR}
        SOURCE_DIR ${LIBDE265_SOURCE_DIR}
        BINARY_DIR ${LIBDE265_BINARY_DIR}
        CMAKE_ARGS -DBUILD_SHARED_LIBS=ON -DENABLE_SDL=OFF
        BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
        BUILD_BYPRODUCTS ${LIBDE265_LIBRARIES}
        INSTALL_COMMAND ${CMAKE_COMMAND} --install <BINARY_DIR> --prefix ${LIBDE265_INSTALL_DIR}
    )
else()
    ExternalProject_Add(${LIBDE265_TARGET_NAME}
        GIT_REPOSITORY https://github.com/strukturag/libde265.git
        GIT_TAG 67831118e3d6961fab4c29fc4364fa0eccfb8473
        PREFIX ${LIBDE265_PREFIX_DIR}
        SOURCE_DIR ${LIBDE265_SOURCE_DIR}
        BINARY_DIR ${LIBDE265_BINARY_DIR}
        CMAKE_ARGS -DBUILD_SHARED_LIBS=OFF -DENABLE_SDL=OFF
        BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
        BUILD_BYPRODUCTS ${LIBDE265_LIBRARIES}
        INSTALL_COMMAND ${CMAKE_COMMAND} --install <BINARY_DIR> --prefix ${LIBDE265_INSTALL_DIR}
    )
endif()

# Setup libjpeg-turbo
set(JPEGTURBO_TARGET_NAME turbojpeg)
set(JPEGTURBO_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${JPEGTURBO_TARGET_NAME})
set(JPEGTURBO_SOURCE_DIR ${THIRD_PARTY_DIR}/${JPEGTURBO_TARGET_NAME})
set(JPEGTURBO_BINARY_DIR ${JPEGTURBO_PREFIX_DIR}/src/${JPEGTURBO_TARGET_NAME}-build)
set(JPEG_INCLUDE_DIRS ${JPEGTURBO_SOURCE_DIR}/src ${JPEGTURBO_BINARY_DIR})
if(MSVC)
    set(JPEG_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}jpeg-static${CMAKE_STATIC_LIBRARY_SUFFIX})
else()
    set(JPEG_LIB ${CMAKE_STATIC_LIBRARY_PREFIX}jpeg${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()

# Install the library in a local path and refer to it later for libultrahdr
set(JPEG_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/turbojpeg-install)
if (MSVC)
	set(JPEG_LIB_PREFIX ${JPEG_INSTALL_DIR}/lib/)
else()
	set(JPEG_LIB_PREFIX ${JPEG_INSTALL_DIR}/lib64/)
endif()
set(JPEG_LIBRARIES ${JPEG_LIB_PREFIX}${JPEG_LIB})

message(STATUS "Looking for jpegturbo .lib at: ${JPEG_LIBRARIES}")

ExternalProject_Add(${JPEGTURBO_TARGET_NAME}
    GIT_REPOSITORY https://github.com/libjpeg-turbo/libjpeg-turbo.git
    GIT_TAG 3.1.0
    PREFIX ${JPEGTURBO_PREFIX_DIR}
    SOURCE_DIR ${JPEGTURBO_SOURCE_DIR}
    BINARY_DIR ${JPEGTURBO_BINARY_DIR}
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
    CMAKE_ARGS -DENABLE_SHARED=0 -DCMAKE_POSITION_INDEPENDENT_CODE=1
    BUILD_BYPRODUCTS ${JPEG_LIBRARIES}
    INSTALL_COMMAND ${CMAKE_COMMAND} --install <BINARY_DIR> --prefix ${JPEG_INSTALL_DIR}
)

# Setup libheif
set(LIBHEIF_TARGET_NAME libheif)
set(LIBHEIF_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${LIBHEIF_TARGET_NAME})
set(LIBHEIF_SOURCE_DIR ${THIRD_PARTY_DIR}/${LIBHEIF_TARGET_NAME})
set(LIBHEIF_BINARY_DIR ${LIBHEIF_PREFIX_DIR}/src/${LIBHEIF_TARGET_NAME}-build)
set(LIBHEIF_INCLUDE_DIRS ${LIBHEIF_SOURCE_DIR}/libheif/api ${LIBHEIF_BINARY_DIR})

if (MSVC)
	set(HEIF_LIB_PREFIX ${LIBHEIF_BINARY_DIR}/libheif/${PROJECT_CONFIG}/)
else()
	set(HEIF_LIB_PREFIX ${LIBHEIF_BINARY_DIR}/libheif/)
endif()
set(HEIF_LIB_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}heif${CMAKE_STATIC_LIBRARY_SUFFIX})
set(LIBHEIF_LIBRARIES ${HEIF_LIB_PREFIX}${HEIF_LIB_STATIC})

message(STATUS "Looking for libheif libs: ${LIBHEIF_LIBRARIES}")

# Build libheif with BUILD_SHARED_LIBS=ON for Windows
# Don't include JPEG library for non-Windows builds until I can figure out how
# to fix them.
if (MSVC)
	ExternalProject_Add(${LIBHEIF_TARGET_NAME}
	    DEPENDS ${LIBDE265_TARGET_NAME} ${JPEGTURBO_TARGET_NAME}
	    GIT_REPOSITORY https://github.com/strukturag/libheif.git
	    GIT_TAG d84f58fe0af319f01ec2fd1739873f10400253b5
	    PREFIX ${LIBHEIF_PREFIX_DIR}
	    SOURCE_DIR ${LIBHEIF_SOURCE_DIR}
	    BINARY_DIR ${LIBHEIF_BINARY_DIR}
	    CMAKE_ARGS --preset=release-noplugins -DWITH_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON
	    CMAKE_CACHE_ARGS
		"-DLIBDE265_LIBRARY:FILEPATH=${LIBDE265_INSTALL_DIR}/lib/${LIBDE265_LIB}"
		"-DLIBDE265_INCLUDE_DIR:FILEPATH=${LIBDE265_INSTALL_DIR}/include"
		"-DWITH_JPEG_ENCODER:BOOL=ON"
		"-DWITH_JPEG_DECODER:BOOL=ON"
		"-DJPEG_LIBRARY:FILEPATH=${JPEG_LIBRARIES}"
		"-DJPEG_INCLUDE_DIR:FILEPATH=${JPEGTURBO_SOURCE_DIR}"
	    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
	    BUILD_BYPRODUCTS ${LIBHEIF_LIBRARIES}
	    INSTALL_COMMAND ""
	)
else()
	ExternalProject_Add(${LIBHEIF_TARGET_NAME}
	    DEPENDS ${LIBDE265_TARGET_NAME} ${JPEGTURBO_TARGET_NAME}
	    GIT_REPOSITORY https://github.com/strukturag/libheif.git
	    GIT_TAG d84f58fe0af319f01ec2fd1739873f10400253b5
	    PREFIX ${LIBHEIF_PREFIX_DIR}
	    SOURCE_DIR ${LIBHEIF_SOURCE_DIR}
	    BINARY_DIR ${LIBHEIF_BINARY_DIR}
	    CMAKE_ARGS --preset=release-noplugins -DWITH_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF
	    CMAKE_CACHE_ARGS
		"-DLIBDE265_LIBRARY:FILEPATH=${LIBDE265_INSTALL_DIR}/lib/${LIBDE265_LIB}"
		"-DLIBDE265_INCLUDE_DIR:FILEPATH=${LIBDE265_INSTALL_DIR}/include"
	    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
	    BUILD_BYPRODUCTS ${LIBHEIF_LIBRARIES}
	    INSTALL_COMMAND ""
	)
endif()

# Setup libultrahdr
set(LIBUHDR_TARGET_NAME libultrahdr)
set(LIBUHDR_PREFIX_DIR ${CMAKE_CURRENT_BINARY_DIR}/${LIBUHDR_TARGET_NAME})
set(LIBUHDR_SOURCE_DIR ${THIRD_PARTY_DIR}/${LIBUHDR_TARGET_NAME})
set(LIBUHDR_BINARY_DIR ${LIBUHDR_PREFIX_DIR}/src/${LIBUHDR_TARGET_NAME}-build)
set(LIBUHDR_INCLUDE_DIRS ${LIBUHDR_SOURCE_DIR}/ ${LIBHEIF_BINARY_DIR})

if (MSVC)
	set(UHDR_LIB_PREFIX ${LIBUHDR_BINARY_DIR}/${PROJECT_CONFIG}/)
	set(UHDR_LIB_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}uhdr-static${CMAKE_STATIC_LIBRARY_SUFFIX})
else()
	set(UHDR_LIB_PREFIX ${LIBUHDR_BINARY_DIR}/)
	set(UHDR_LIB_STATIC ${CMAKE_STATIC_LIBRARY_PREFIX}uhdr${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()
set(LIBUHDR_LIBRARIES ${UHDR_LIB_PREFIX}${UHDR_LIB_STATIC})

message(STATUS "Looking for libultrahdr libs: ${LIBUHDR_LIBRARIES}")

# JPEG_MODULE_PATH is to hijack this project's find(JPEG QUIET) call
# This project builds both static and dynamic libraries simultaneously
ExternalProject_Add(${LIBUHDR_TARGET_NAME}
    DEPENDS ${JPEGTURBO_TARGET_NAME}
    GIT_REPOSITORY https://github.com/ricera/libultrahdr.git
    GIT_TAG 38f19cb90b19f46911d3ba5a2c2cbe496c99603b
    PREFIX ${LIBUHDR_PREFIX_DIR}
    SOURCE_DIR ${LIBUHDR_SOURCE_DIR}
    BINARY_DIR ${LIBUHDR_BINARY_DIR}
    CMAKE_ARGS -DUHDR_WRITE_XMP=1 -DUHDR_BUILD_DEPS=0 -DJPEG_MODULE_PATH=${JPEG_INSTALL_DIR}
    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config ${PROJECT_CONFIG}
    BUILD_BYPRODUCTS ${LIBUHDR_LIBRARIES}
    INSTALL_COMMAND ""
)
ExternalProject_Add_Step(${LIBUHDR_TARGET_NAME} copy_findjpeg
    ALWAYS true
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/FindJPEG.cmake ${LIBUHDR_SOURCE_DIR}/cmake/
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDEES download
    DEPENDERS configure
)

set(PRIVATE_INCLUDE_DIR ${LIBHEIF_SOURCE_DIR} ${LIBHEIF_INCLUDE_DIRS} ${LIBUHDR_SOURCE_DIR} ${LIBUHDR_INCLUDE_DIRS})
set(PRIVATE_LINK_LIBS ${LIBHEIF_LIBRARIES} ${LIBUHDR_LIBRARIES} ${JPEG_LIBRARIES} ${LIBDE265_LIBRARIES})

set(HEIF2JPG_APP heif2jpg)
add_executable(${HEIF2JPG_APP}
    "app/main.cc"
)
add_dependencies(${HEIF2JPG_APP} ${LIBUHDR_TARGET_NAME} ${LIBHEIF_TARGET_NAME})
target_include_directories(${HEIF2JPG_APP} PRIVATE ${PRIVATE_INCLUDE_DIR})
target_link_libraries(${HEIF2JPG_APP} PRIVATE ${PRIVATE_LINK_LIBS})

find_package(Threads REQUIRED)
target_link_libraries(${HEIF2JPG_APP} PRIVATE Threads::Threads)

if (MSVC)
    target_link_options(${HEIF2JPG_APP} PRIVATE /NODEFAULTLIB:LIBCMT)
    # This will cause all sorts of linking issues
    # target_compile_options(${HEIF2JPG_APP} PRIVATE /MT)
endif()

# Install app and necessary .dlls
install(TARGETS ${HEIF2JPG_APP})
if (MSVC)
	install(FILES ${HEIF_LIB_PREFIX}/heif.dll TYPE BIN)
	install(FILES ${LIBDE265_INSTALL_DIR}/bin/libde265.dll TYPE BIN)
	#install(FILES ${UHDR_LIB_PREFIX}/uhdr.dll TYPE BIN)
	#install(FILES ${JPEG_LIB_PREFIX}/jpeg62.dll TYPE BIN)
endif()
